scalar DateTime
scalar EmailAddress

type Mutation {
  createUser(input: CreateUserInput!): User
  deleteUser(id: ID!): User
  updateUser(input: UpdateUserInput!): User
  changePassword(id: ID!, oldPassword: String, newPassword: String!): User
  createBaby(input: CreateBabyInput!): Baby
  updateBaby(input: UpdateBabyInput!): Baby
  deleteBaby(id: ID!): Baby
  birth(id: ID!, birthdate: String): Baby
  unbirth(id: ID!): Baby
  createMeasurement(input: CreateMeasurementInput!): Measurement
  deleteMeasurement(id: ID!): Measurement
  createDiaper(input: CreateDiaperInput!): Diaper
  deleteDiaper(id: ID!): Diaper
  createSleep(input: CreateSleepInput!): Sleep
  updateSleep(input: UpdateSleepInput!): Sleep
  deleteSleep(id: ID!): Sleep
  createFeeding(input: CreateFeedingInput!): Feeding
  updateFeeding(input: UpdateFeedingInput!): Feeding
  deleteFeeding(id: ID!): Feeding
  logMilestoneAchievement(babyId: ID!, milestoneId: ID!): MilestoneAchievement
  deleteMilestoneAchievement(id: ID!): MilestoneAchievement
}

type Query {
  me: User
  user(id: ID!): User
  userCount: Int
  users: [User]
  babies: [Baby]
  baby(id: ID!): Baby
  openSleep(babyId: ID!): Sleep
  openFeeding(babyId: ID!): Feeding
  recentSleeps(babyId: ID, limit: Int): [Sleep]
  recentFeedings(babyId: ID, limit: Int): [Feeding]
  recentDiapers(babyId: ID, limit: Int): [Diaper]
  weight(babyId: ID): Measurement
  length(babyId: ID): Measurement
  milestoneAchievements(babyId: ID): [MilestoneAchievement]
  milestones(input: MilestonesInput): [Milestone]
  recentMedications(babyId: ID, limit: Int): [Medication]
}

type User {
  id: ID!
  username: String!
  email: EmailAddress
  isVerified: Boolean
  name: String
  isAdmin: Boolean!
  fatherTo: [Baby!]!
  motherTo: [Baby!]!
  createdAt: DateTime
  updatedAt: DateTime
}

type Baby {
  id: ID!
  name: String
  alternativeName: String
  nickname: String
  """
  Birthdates are in YY-MM-DD format without times
  """
  birthdate: String
  """
  Times should be in 00:00:00 24-hr format
  """
  birthTime: String
  dueDate: String
  gender: String
  father: User
  mother: User
  measurements: [Measurement!]!
  diapers: [Diaper!]!
  createdAt: DateTime
  updatedAt: DateTime
}

type Measurement {
  id: ID!
  baby: Baby!
  """
  Measurement types are many, but the three most useful will be
  weightInGrams, lengthInMillimeters, and headCircumferenceInMillimeters
  Use camelCase and include the smallest integer unit
  """
  type: String!
  value: Int!
  timestamp: DateTime
  recordedBy: User
}

type Diaper {
  id: ID!
  baby: Baby!
  timestamp: DateTime!
  isWet: Boolean!
  isDirty: Boolean!
  """
  Color and consistency of BMs and anything out of the ordinary
  """
  notes: String
  recordedBy: User
}

type Sleep {
  id: ID!
  baby: Baby!
  start: DateTime!
  end: DateTime
  wakeReason: String
  notes: String
  recordedBy: User
}

type Feeding {
  id: ID!
  baby: Baby
  start: DateTime!
  end: DateTime
  type: FeedingType
  """
  If the baby fed from the bottle, how much was consumed?
  """
  volumeInMl: Int
  """
  Which breast did feeding start on?
  """
  startedBreast: Breast
  """
  Did the baby switch to the other breast?
  """
  switched: Boolean
  notes: String
  recordedBy: User
}

enum FeedingType {
  BREASTBREASTMILK
  BOTTLEBREASTMILK
  BOTTLEFORMULA
  SOLIDFOOD
}

enum Breast {
  LEFT
  RIGHT
}

type Milestone {
  id: ID!
  monthsAge: Int!
  category: MilestoneCategory!
  text: String!
  milestoneAchievements: [MilestoneAchievement]
}

enum MilestoneCategory {
  SEL
  LANG
  COG
  PHYS
}

type MilestoneAchievement {
  id: ID!
  baby: Baby
  milestone: Milestone
  timestamp: DateTime
}

type Medication {
  id: ID!
  baby: Baby
  time: DateTime
  dosage: String
  type: String
  notes: String
  recordedBy: User
}

input CreateUserInput {
  username: String!
  password: String!
  email: EmailAddress
  name: String
  isAdmin: Boolean
}

input UpdateUserInput {
  id: ID!
  username: String
  email: EmailAddress
  name: String
  isAdmin: Boolean
}

input CreateBabyInput {
  name: String
  alternativeName: String
  nickname: String
  birthdate: String
  birthTime: String
  dueDate: String
  gender: String
}

input UpdateBabyInput {
  id: ID!
  name: String
  alternativeName: String
  nickname: String
  birthdate: String
  birthTime: String
  dueDate: String
  gender: String
}

input CreateMeasurementInput {
  babyId: ID!
  type: String!
  value: Int!
  timestamp: DateTime
}

input CreateDiaperInput {
  babyId: ID!
  isWet: Boolean!
  isDirty: Boolean!
  timestamp: DateTime
  notes: String
}

input CreateSleepInput {
  babyId: ID!
  start: DateTime!
  end: DateTime
  wakeReason: String
  notes: String
}

input UpdateSleepInput {
  id: ID!
  end: DateTime
  start: DateTime
  wakeReason: String
  notes: String
}

input UpdateFeedingInput {
  id: ID!
  start: DateTime
  end: DateTime
  type: FeedingType
  volumeInMl: Int
  startedBreast: Breast
  switched: Boolean
  notes: String
}

input CreateFeedingInput {
  babyId: ID!
  start: DateTime!
  end: DateTime
  type: FeedingType
  volumeInMl: Int
  startedBreast: Breast
  switched: Boolean
  notes: String
}

input MilestonesInput {
  category: MilestoneCategory
  monthsAge: Int
}
