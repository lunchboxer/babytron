scalar DateTime
scalar EmailAddress

type Mutation {
  createUser(input: CreateUserInput!): User
  deleteUser(id: ID!): User
  updateUser(input: UpdateUserInput!): User
  changePassword(id: ID!, oldPassword: String, newPassword: String!): User
  createBaby(input: CreateBabyInput!): Baby
  updateBaby(input: UpdateBabyInput!): Baby
  deleteBaby(id: ID!): Baby
  birth(id: ID!, birthdate: String): Baby
  unbirth(id: ID!): Baby
  createMeasurement(input: CreateMeasurementInput!): Measurement
  deleteMeasurement(id: ID!): Measurement
}

type Query {
  me: User
  user(id: ID!): User
  userCount: Int
  users: [User]
  babies: [Baby]
  baby(id: ID!): Baby
}

type User {
  id: ID!
  username: String!
  email: EmailAddress
  isVerified: Boolean
  name: String
  isAdmin: Boolean!
  fatherTo: [Baby!]!
  motherTo: [Baby!]!
  createdAt: DateTime
  updatedAt: DateTime
}

type Baby {
  id: ID!
  name: String
  alternativeName: String
  nickname: String
  """
  Birthdates are in YY-MM-DD format without times
  """
  birthdate: String
  """
  Times should be in 00:00:00 24-hr format
  """
  birthTime: String
  dueDate: String
  gender: String
  father: User
  mother: User
  measurements: [Measurement!]!
  createdAt: DateTime
  updatedAt: DateTime
}

type Measurement {
  id: ID!
  baby: Baby!
  """
  Measurement types are many, but the three most useful will be
  weightInGrams, lengthInMillimeters, and headCircumferenceInMillimeters
  Use camelCase and include the smallest integer unit
  """
  type: String!
  value: Int!
  timestamp: DateTime
}

input CreateUserInput {
  username: String!
  password: String!
  email: EmailAddress
  name: String
  isAdmin: Boolean
}

input UpdateUserInput {
  id: ID!
  username: String
  email: EmailAddress
  name: String
  isAdmin: Boolean
}

input CreateBabyInput {
  name: String
  alternativeName: String
  nickname: String
  birthdate: String
  birthTime: String
  dueDate: String
  gender: String
}

input UpdateBabyInput {
  id: ID!
  name: String
  alternativeName: String
  nickname: String
  birthdate: String
  birthTime: String
  dueDate: String
  gender: String
}

input CreateMeasurementInput {
  babyId: ID!
  type: String!
  value: Int!
  timestamp: DateTime
}
