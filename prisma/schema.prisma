generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String?                @unique
  username             String                 @unique
  name                 String?
  password             String
  fatherTo             Baby[]                 @relation("father")
  motherTo             Baby[]                 @relation("mother")
  isAdmin              Boolean                @default(false)
  isVerified           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  diapersRecorded      Diaper[]
  sleepsRecorded       Sleep[]
  feedingsRecorded     Feeding[]
  //  activitiesRecorded   Activity[]
  medicationsRecorded  Medication[]
  notesRecorded        Note[]
  measurementsRecorded Measurement[]
  achievementRecorded  MilestoneAchievement[]
}

model Baby {
  id                    String                 @id @default(cuid())
  name                  String?
  alternativeName       String?
  birthdate             String?
  birthTime             String?
  nickname              String?
  dueDate               String?
  gender                String?
  mother                User?                  @relation("mother", fields: [motherId], references: [id])
  motherId              String?
  father                User?                  @relation("father", fields: [fatherId], references: [id])
  fatherId              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  measurements          Measurement[]
  diapers               Diaper[]
  sleeps                Sleep[]
  feedings              Feeding[]
  //  activities            Activity[]
  medications           Medication[]
  notes                 Note[]
  milestoneAchievements MilestoneAchievement[]
}

model Measurement {
  id         String   @id @default(cuid())
  baby       Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId     String
  type       String
  value      Int
  timestamp  DateTime @default(now())
  recordedBy User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Diaper {
  id         String   @id @default(cuid())
  baby       Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId     String
  timestamp  DateTime @default(now())
  isWet      Boolean  @default(false)
  isDirty    Boolean  @default(false)
  notes      String?
  recordedBy User     @relation(fields: [userId], references: [id])
  userId     String
}

model Sleep {
  id         String    @id @default(cuid())
  baby       Baby      @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId     String
  start      DateTime?
  end        DateTime?
  wakeReason String?
  notes      String?
  recordedBy User      @relation(fields: [userId], references: [id])
  userId     String
}

model Feeding {
  id            String    @id @default(cuid())
  baby          Baby      @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId        String
  start         DateTime?
  end           DateTime?
  type          String
  volumeInMl    Int?
  startedBreast String?
  switched      Boolean?
  notes         String?
  recordedBy    User      @relation(fields: [userId], references: [id])
  userId        String
}

// model activity {
//   id          string    @id @default(cuid())
//   baby        baby      @relation(fields: [babyid], references: [id], ondelete: cascade)
//   babyid      string
//  starttime   datetime?
//   endtime     datetime?
//   description string
//   people      string[]
//   notes       string?
//   recordedby  user      @relation(fields: [userid], references: [id])
//   userid      string
//}

model Medication {
  id         String   @id @default(cuid())
  baby       Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId     String
  time       DateTime
  dosage     String
  type       String
  notes      String
  recordedBy User     @relation(fields: [userId], references: [id])
  userId     String
}

model Note {
  id         String   @id @default(cuid())
  baby       Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId     String
  timestamp  DateTime @default(now())
  text       String
  recordedBy User     @relation(fields: [userId], references: [id])
  userId     String
}

model Milestone {
  id                    String                 @id
  monthsAge             Int
  category              String
  text                  String
  milestoneAchievements MilestoneAchievement[]
}

model MilestoneAchievement {
  id          String    @id @default(cuid())
  baby        Baby      @relation(fields: [babyId], references: [id], onDelete: Cascade)
  babyId      String
  timestamp   DateTime  @default(now())
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId String
  recordedBy  User      @relation(fields: [userId], references: [id])
  userId      String
}
